/// <reference types="node" />
import { DiscloudConfigScopes, type DiscloudConfigType } from "@discloudapp/api-types/v2";
import EventEmitter from "events";
export interface DiscloudConfigEventMap {
    change: [data: DiscloudConfigType];
    disposed: [data: DiscloudConfigType];
    error: [error: Error];
    missing: [data: DiscloudConfigType];
}
export declare class DiscloudConfig extends EventEmitter<DiscloudConfigEventMap> {
    #private;
    readonly path: string;
    static readonly fileName = "discloud.config";
    constructor(path: string);
    dispose(): void;
    get comments(): string[];
    get data(): DiscloudConfigType;
    get exists(): boolean;
    get isFile(): boolean;
    get existsMain(): false | "file" | "dir";
    get mainFileExt(): string | undefined;
    get missingProps(): (DiscloudConfigScopes.ID | DiscloudConfigScopes.MAIN | DiscloudConfigScopes.NAME | DiscloudConfigScopes.RAM | DiscloudConfigScopes.TYPE | DiscloudConfigScopes.VERSION)[];
    get<K extends keyof DiscloudConfigType>(key: K): DiscloudConfigType[K];
    set<K extends keyof DiscloudConfigType>(key: K, value: DiscloudConfigType[K]): void;
    update(save: Partial<DiscloudConfigType>, comments?: string[]): Error | void;
}
//# sourceMappingURL=DiscloudConfig.d.ts.map