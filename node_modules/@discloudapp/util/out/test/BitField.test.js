"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const node_test_1 = require("node:test");
const BitField_1 = tslib_1.__importDefault(require("../BitField"));
(0, node_test_1.test)("Number BitField resolve tests", () => {
    const NumberFlags = {
        flag1: 1 << 0,
        flag2: 1 << 1,
        flag4: 1 << 2,
        flag16: 1 << 4,
        flag32: 1 << 5,
    };
    class ExtendedNumberBitField extends BitField_1.default {
        static Flags = NumberFlags;
    }
    assert_1.default.ok(new ExtendedNumberBitField());
    assert_1.default.ok(new ExtendedNumberBitField(Object.values(NumberFlags)));
    assert_1.default.ok(new ExtendedNumberBitField(1 << 3));
    assert_1.default.strictEqual(new ExtendedNumberBitField(Object.values(NumberFlags)).bitField, 55);
    assert_1.default.throws(() => new ExtendedNumberBitField("flag0"));
});
(0, node_test_1.test)("BigInt BitField resolve tests", () => {
    const BigIntFlags = {
        flag1: 1n << 0n,
        flag2: 1n << 1n,
        flag4: 1n << 2n,
        flag16: 1n << 4n,
        flag32: 1n << 5n,
    };
    class ExtendedBigIntBitField extends BitField_1.default {
        static DefaultBit = 0n;
        static Flags = BigIntFlags;
    }
    assert_1.default.ok(new ExtendedBigIntBitField());
    assert_1.default.ok(new ExtendedBigIntBitField(Object.values(BigIntFlags)));
    assert_1.default.ok(new ExtendedBigIntBitField(1n << 3n));
    assert_1.default.strictEqual(new ExtendedBigIntBitField(Object.values(BigIntFlags)).bitField, 55n);
    assert_1.default.throws(() => new ExtendedBigIntBitField("flag0"));
});
(0, node_test_1.test)("Number BitField methods tests", () => {
    const NumberFlags = {
        flag1: 1 << 0,
        flag2: 1 << 1,
        flag4: 1 << 2,
        flag16: 1 << 4,
        flag32: 1 << 5,
    };
    class ExtendedNumberBitField extends BitField_1.default {
        static Flags = NumberFlags;
    }
    const extendedNumberBitField = new ExtendedNumberBitField(NumberFlags.flag1, NumberFlags.flag4);
    assert_1.default.strictEqual(extendedNumberBitField.bitField, 5);
    assert_1.default.strictEqual(extendedNumberBitField.any(NumberFlags.flag1, NumberFlags.flag16), true);
    assert_1.default.strictEqual(extendedNumberBitField.any(NumberFlags.flag2, NumberFlags.flag32), false);
    assert_1.default.strictEqual(extendedNumberBitField.has(NumberFlags.flag1, NumberFlags.flag4), true);
    assert_1.default.strictEqual(extendedNumberBitField.has(NumberFlags.flag1, NumberFlags.flag16), false);
    assert_1.default.strictEqual(extendedNumberBitField.equals(NumberFlags.flag1, NumberFlags.flag4), true);
    assert_1.default.strictEqual(extendedNumberBitField.equals(NumberFlags.flag1), false);
    assert_1.default.deepStrictEqual(extendedNumberBitField.missing(NumberFlags.flag1, NumberFlags.flag4), []);
    assert_1.default.deepStrictEqual(extendedNumberBitField.missing(NumberFlags.flag1, NumberFlags.flag16), ["flag16"]);
    assert_1.default.strictEqual(extendedNumberBitField.add(NumberFlags.flag1).bitField, 5);
    assert_1.default.strictEqual(extendedNumberBitField.remove(NumberFlags.flag1).bitField, 4);
    assert_1.default.strictEqual(extendedNumberBitField.add(NumberFlags.flag1).bitField, 5);
    assert_1.default.strictEqual(extendedNumberBitField.set().bitField, 0);
    assert_1.default.strictEqual(extendedNumberBitField.set(NumberFlags.flag1, NumberFlags.flag4).bitField, 5);
    assert_1.default.deepStrictEqual(extendedNumberBitField.toArray(), ["flag1", "flag4"]);
    assert_1.default.deepStrictEqual([...extendedNumberBitField], ["flag1", "flag4"]);
    assert_1.default.strictEqual(extendedNumberBitField.toJSON(), 5);
    assert_1.default.strictEqual(extendedNumberBitField.valueOf(), 5);
    assert_1.default.deepStrictEqual(extendedNumberBitField.serialize(), {
        flag1: true,
        flag2: false,
        flag4: true,
        flag16: false,
        flag32: false,
    });
});
(0, node_test_1.test)("BigInt BitField methods tests", () => {
    const BigIntFlags = {
        flag1: 1n << 0n,
        flag2: 1n << 1n,
        flag4: 1n << 2n,
        flag16: 1n << 4n,
        flag32: 1n << 5n,
    };
    class ExtendedNumberBitField extends BitField_1.default {
        static DefaultBit = 0n;
        static Flags = BigIntFlags;
    }
    const extendedNumberBitField = new ExtendedNumberBitField(BigIntFlags.flag1, BigIntFlags.flag4);
    assert_1.default.strictEqual(extendedNumberBitField.bitField, 5n);
    assert_1.default.strictEqual(extendedNumberBitField.any(BigIntFlags.flag1, BigIntFlags.flag16), true);
    assert_1.default.strictEqual(extendedNumberBitField.any(BigIntFlags.flag2, BigIntFlags.flag32), false);
    assert_1.default.strictEqual(extendedNumberBitField.has(BigIntFlags.flag1, BigIntFlags.flag4), true);
    assert_1.default.strictEqual(extendedNumberBitField.has(BigIntFlags.flag1, BigIntFlags.flag16), false);
    assert_1.default.strictEqual(extendedNumberBitField.equals(BigIntFlags.flag1, BigIntFlags.flag4), true);
    assert_1.default.strictEqual(extendedNumberBitField.equals(BigIntFlags.flag1), false);
    assert_1.default.deepStrictEqual(extendedNumberBitField.missing(BigIntFlags.flag1, BigIntFlags.flag4), []);
    assert_1.default.deepStrictEqual(extendedNumberBitField.missing(BigIntFlags.flag1, BigIntFlags.flag16), ["flag16"]);
    assert_1.default.strictEqual(extendedNumberBitField.add(BigIntFlags.flag1).bitField, 5n);
    assert_1.default.strictEqual(extendedNumberBitField.remove(BigIntFlags.flag1).bitField, 4n);
    assert_1.default.strictEqual(extendedNumberBitField.add(BigIntFlags.flag1).bitField, 5n);
    assert_1.default.strictEqual(extendedNumberBitField.set().bitField, 0n);
    assert_1.default.strictEqual(extendedNumberBitField.set(BigIntFlags.flag1, BigIntFlags.flag4).bitField, 5n);
    assert_1.default.deepStrictEqual(extendedNumberBitField.toArray(), ["flag1", "flag4"]);
    assert_1.default.deepStrictEqual([...extendedNumberBitField], ["flag1", "flag4"]);
    assert_1.default.strictEqual(extendedNumberBitField.toJSON(), "5");
    assert_1.default.strictEqual(extendedNumberBitField.valueOf(), 5n);
    assert_1.default.deepStrictEqual(extendedNumberBitField.serialize(), {
        flag1: true,
        flag2: false,
        flag4: true,
        flag16: false,
        flag32: false,
    });
});
