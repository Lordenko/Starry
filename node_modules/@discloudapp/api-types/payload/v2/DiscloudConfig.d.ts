export declare const APT: {
    canvas: string[];
    ffmpeg: string[];
    java: string[];
    libgl: string[];
    mysql: string[];
    openssl: string[];
    puppeteer: string[];
    tesseract: string[];
    tools: string[];
};
export declare const APTPackages: ("ffmpeg" | "canvas" | "java" | "libgl" | "mysql" | "openssl" | "puppeteer" | "tesseract" | "tools")[];
export type APTString = keyof typeof APT;
export declare enum DiscloudConfigScopes {
    APT = "APT",
    AUTORESTART = "AUTORESTART",
    AVATAR = "AVATAR",
    BUILD = "BUILD",
    ID = "ID",
    MAIN = "MAIN",
    NAME = "NAME",
    RAM = "RAM",
    START = "START",
    TYPE = "TYPE",
    VERSION = "VERSION"
}
export declare const discloudConfigRequiredScopes: {
    readonly bot: readonly [DiscloudConfigScopes.MAIN, DiscloudConfigScopes.NAME, DiscloudConfigScopes.TYPE, DiscloudConfigScopes.RAM, DiscloudConfigScopes.VERSION];
    readonly site: readonly [DiscloudConfigScopes.ID, DiscloudConfigScopes.MAIN, DiscloudConfigScopes.TYPE, DiscloudConfigScopes.RAM, DiscloudConfigScopes.VERSION];
    readonly common: readonly [DiscloudConfigScopes.MAIN, DiscloudConfigScopes.TYPE, DiscloudConfigScopes.RAM, DiscloudConfigScopes.VERSION];
};
export declare const discloudConfigScopes: DiscloudConfigScopes[];
export type DiscloudConfigType<T extends AppTypes = AppTypes, V extends AppLanguages = AppLanguages> = T extends "bot" ? DiscloudConfigBot<V> : T extends "site" ? DiscloudConfigSite<V> : BaseDiscloudConfig<V>;
interface BaseDiscloudConfig<V extends AppLanguages> {
    /**
     * APT packages for your application on Discloud
     */
    APT: string;
    /**
     * If your app has auto-restart enabled
     */
    AUTORESTART: boolean;
    /**
     * Command to compile your app
     */
    BUILD?: string;
    /**
     * Your application id
     */
    ID?: string;
    /**
     * The main file of your application on Discloud
     */
    MAIN: string;
    /**
     * The RAM quantity for your application
     */
    RAM: number;
    /**
     * Command to start your app
     */
    START?: string;
    /**
     * What is your application type. @see {@link AppTypes}
     */
    TYPE: AppTypes;
    /**
     * What is your application version. @see {@link AppVersion}
     */
    VERSION: AppVersion<V>;
}
interface DiscloudConfigBot<V extends AppLanguages> extends BaseDiscloudConfig<V> {
    /**
     * Your application avatar url
     */
    AVATAR?: string;
    /**
     * Your application name
     */
    NAME: string;
    TYPE: "bot";
}
interface DiscloudConfigSite<V extends AppLanguages> extends BaseDiscloudConfig<V> {
    ID: string;
    TYPE: "site";
}
export type AppTypes = "bot" | "site";
export type AppLanguages = "go" | "java" | "js" | "php" | "py" | "rb" | "rs";
export type AppVersion<T extends AppLanguages = AppLanguages> = T extends "go" ? VersionGo : T extends "java" ? VersionJava : T extends "js" ? VersionJs : T extends "php" ? VersionPhp : T extends "py" ? VersionPy : T extends "rb" ? VersionRb : T extends "rs" ? VersionRs : BaseVersion;
type BaseVersion = "latest" | `${number}` | `${number}.${number | "x"}` | `${number}.${number | "x"}.${number | "x"}`;
type VersionGo = BaseVersion;
type VersionJava = BaseVersion;
type VersionJs = BaseVersion | "current" | "suja";
type VersionPhp = BaseVersion;
type VersionPy = BaseVersion | "suja";
type VersionRb = BaseVersion;
type VersionRs = BaseVersion | "suja";
export {};
//# sourceMappingURL=DiscloudConfig.d.ts.map