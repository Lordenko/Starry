"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.REST = void 0;
const tslib_1 = require("tslib");
const events_1 = tslib_1.__importDefault(require("events"));
const RequestManager_1 = require("./RequestManager");
class REST extends events_1.default {
    requestManager;
    constructor(options = {}) {
        super({ captureRejections: true });
        this.requestManager = new RequestManager_1.RequestManager(options)
            .on("error" /* RESTEvents.Error */, this.emit.bind(this, "error" /* RESTEvents.Error */))
            .on("rateLimited" /* RESTEvents.RateLimited */, this.emit.bind(this, "rateLimited" /* RESTEvents.RateLimited */));
    }
    get token() {
        return this.requestManager.token;
    }
    /**
     * Sets the authorization token that should be used for requests
     *
     * @param token - The authorization token to use
     */
    setToken(token) {
        this.requestManager.setToken(token);
        return this;
    }
    /**
     * Runs a get request from the api
     *
     * @param fullRoute - The full route to query
     * @param options - Optional request options
     */
    get(fullRoute, options = {}) {
        return this.request(Object.assign(options, { fullRoute, method: "GET" /* RequestMethod.Get */ }));
    }
    /**
     * Runs a delete request from the api
     *
     * @param fullRoute - The full route to query
     * @param options - Optional request options
     */
    delete(fullRoute, options = {}) {
        return this.request(Object.assign(options, { fullRoute, method: "DELETE" /* RequestMethod.Delete */ }));
    }
    /**
     * Runs a post request from the api
     *
     * @param fullRoute - The full route to query
     * @param options - Optional request options
     */
    post(fullRoute, options = {}) {
        return this.request(Object.assign(options, { fullRoute, method: "POST" /* RequestMethod.Post */ }));
    }
    /**
     * Runs a put request from the api
     *
     * @param fullRoute - The full route to query
     * @param options - Optional request options
     */
    put(fullRoute, options = {}) {
        return this.request(Object.assign(options, { fullRoute, method: "PUT" /* RequestMethod.Put */ }));
    }
    /**
     * Runs a request from the api
     *
     * @param options - Request options
     */
    async request(options) {
        const res = await this.raw(options);
        const contentType = res.headers.get("content-type");
        if (contentType?.includes("application/json"))
            return res.json();
        if (contentType?.includes("text/"))
            return res.text();
        return res.arrayBuffer();
    }
    /**
     * Runs a request from the API, yielding the raw Response object
     *
     * @param options - Request options
     */
    raw(options) {
        const request = this.requestManager.resolveRequest(options);
        return this.requestManager.request(request.url, request.options);
    }
}
exports.REST = REST;
