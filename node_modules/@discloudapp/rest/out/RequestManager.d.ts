/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import EventEmitter from "events";
import type { InternalRequest, RESTOptions, RequestOptions, RestEvents } from "./@types";
export declare class RequestManager extends EventEmitter<RestEvents> {
    #private;
    readonly options: RESTOptions;
    /**
     * The number of requests limit on the global bucket
     */
    globalLimit: number;
    /**
     * The number of requests remaining in the global bucket
     */
    globalRemaining: number;
    /**
     * The seconds that the global bucket is reset
     */
    globalReset: number;
    /**
     * The time at which the last request was made
     */
    globalTime: number;
    constructor(options?: Partial<RESTOptions>);
    private get baseURL();
    /**
     * If the rate limit bucket is currently limited by its limit
     */
    get globalLimited(): boolean;
    /**
     * The time until queued requests can continue
     */
    get globalTimeToReset(): number;
    get token(): string;
    /**
     * Sets the authorization token that should be used for requests
     *
     * @param token - The authorization token to use
     */
    setToken(token: string): this;
    resolveRequest(request: InternalRequest): {
        url: import("url").URL;
        options: RequestInit;
    };
    request(url: URL, options?: RequestOptions): Promise<Response>;
}
//# sourceMappingURL=RequestManager.d.ts.map