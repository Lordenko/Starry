"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestManager = void 0;
const tslib_1 = require("tslib");
const util_1 = require("@discloudapp/util");
const events_1 = tslib_1.__importDefault(require("events"));
const promises_1 = require("timers/promises");
const errors_1 = require("./errors");
const utils_1 = require("./utils");
class RequestManager extends events_1.default {
    #token;
    options;
    /**
     * The number of requests limit on the global bucket
     */
    globalLimit = 60;
    /**
     * The number of requests remaining in the global bucket
     */
    globalRemaining = 0;
    /**
     * The seconds that the global bucket is reset
     */
    globalReset = 0;
    /**
     * The time at which the last request was made
     */
    globalTime = 0;
    constructor(options = {}) {
        super({ captureRejections: true });
        this.options = (0, util_1.mergeDefaults)(utils_1.DefaultRestOptions, options);
        this.globalLimit = this.options.globalRequestsPerMinute;
        this.globalRemaining = this.options.globalRequestsPerMinute;
    }
    get baseURL() {
        return this.options.api + "/v" + this.options.version;
    }
    /**
     * If the rate limit bucket is currently limited by its limit
     */
    get globalLimited() {
        return !this.globalRemaining && this.globalTimeToReset > -1;
    }
    /**
     * The time until queued requests can continue
     */
    get globalTimeToReset() {
        return this.globalReset * 1000 + this.globalTime - Date.now();
    }
    get token() {
        return this.#token;
    }
    /**
     * Sets the authorization token that should be used for requests
     *
     * @param token - The authorization token to use
     */
    setToken(token) {
        this.#token = token;
        return this;
    }
    resolveRequest(request) {
        const url = new URL(this.baseURL + request.fullRoute);
        const options = { method: request.method };
        const headers = new Headers(Object.assign({}, request.headers, this.options.headers, { "api-token": this.#token }));
        const formData = new FormData();
        if (request.query)
            url.search = new URLSearchParams(request.query).toString();
        if (request.file) {
            if (request.file instanceof File) {
                formData.append("file", request.file);
            }
            else {
                if (request.file.data instanceof File) {
                    request.file.name ??= request.file.data.name;
                }
                else {
                    request.file.data = new File([request.file.data], request.file.name);
                }
                formData.append(request.file.key ?? "file", request.file.data);
            }
        }
        if (request.body) {
            if (request.file) {
                if (typeof request.body === "string") {
                    try {
                        request.body = JSON.parse(request.body);
                    }
                    catch {
                        request.body = {};
                    }
                }
                for (const [key, value] of Object.entries(request.body))
                    formData.append(key, value);
            }
            else {
                headers.set("Content-Type", "application/json");
                if (typeof request.body === "string") {
                    options.body = request.body;
                }
                else {
                    options.body = JSON.stringify(request.body);
                }
            }
        }
        if (request.file)
            options.body = formData;
        options.headers = Object.fromEntries(headers.entries());
        return { url, options };
    }
    async request(url, options) {
        while (this.globalLimited) {
            this.emit("rateLimited" /* RESTEvents.RateLimited */, {
                global: this.globalLimited,
                method: options?.method ?? "GET",
                path: url.pathname,
                timeToReset: this.globalTimeToReset,
                url: url.toString(),
            });
            await (0, promises_1.setTimeout)(this.globalTimeToReset);
        }
        const res = await fetch(url, options);
        this.globalTime = Date.now();
        const limit = Number(res.headers.get("ratelimit-limit"));
        const remaining = Number(res.headers.get("ratelimit-remaining"));
        const reset = Number(res.headers.get("ratelimit-reset"));
        if (!isNaN(limit))
            this.globalLimit = limit;
        if (!isNaN(remaining))
            this.globalRemaining = remaining;
        if (!isNaN(reset))
            this.globalReset = reset;
        if (this.globalLimited) {
            this.emit("rateLimited" /* RESTEvents.RateLimited */, {
                global: this.globalLimited,
                method: options?.method ?? "GET",
                path: url.pathname,
                timeToReset: this.globalTimeToReset,
                url: url.toString(),
            });
        }
        if (res.status > 399) {
            const body = options?.body;
            const code = res.status;
            const message = await res.json().then((body) => body.message).catch(() => res.text());
            const method = options?.method ?? "GET";
            const path = url.pathname;
            throw new errors_1.DiscloudAPIError(message, code, method, path, body);
        }
        return res;
    }
}
exports.RequestManager = RequestManager;
