import type { RestEvents, RESTOptions } from "@discloudapp/rest";
import type { FileResolvable } from "@discloudapp/util";
import z from "zod";
export type Constructable<T extends new (...args: any) => InstanceType<T> = any> = new (...args: any) => InstanceType<T>;
export interface Constructor<T> {
    new (...args: any): T;
}
export type If<T extends boolean, A, B = undefined> = T extends true ? A : T extends false ? B : A | B;
export interface DiscloudAppOptions {
    rest?: Partial<RESTOptions>;
}
export declare const ProfileOptions: z.ZodObject<{
    avatarURL: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    avatarURL?: string | undefined;
    name?: string | undefined;
}, {
    avatarURL?: string | undefined;
    name?: string | undefined;
}>;
export type ProfileOptions = z.infer<typeof ProfileOptions>;
export type CreateAppOptions = UploadAppOptions;
export type UpdateAppOptions = UploadAppOptions;
export interface UploadAppOptions {
    file: FileResolvable;
}
export type LocaleString = "en-US" | "pt-BR";
export interface ClientEvents extends RestEvents {
}
//# sourceMappingURL=index.d.ts.map