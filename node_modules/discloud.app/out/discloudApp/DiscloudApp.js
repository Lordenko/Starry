"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const rest_1 = require("@discloudapp/rest");
const util_1 = require("@discloudapp/util");
const events_1 = tslib_1.__importDefault(require("events"));
const process_1 = require("process");
const AppAptManager_1 = tslib_1.__importDefault(require("../managers/AppAptManager"));
const AppManager_1 = tslib_1.__importDefault(require("../managers/AppManager"));
const AppTeamManager_1 = tslib_1.__importDefault(require("../managers/AppTeamManager"));
const TeamAppManager_1 = tslib_1.__importDefault(require("../managers/TeamAppManager"));
const User_1 = tslib_1.__importDefault(require("../structures/User"));
const util_2 = require("../util");
class DiscloudApp extends events_1.default {
    options;
    rest;
    appApt = new AppAptManager_1.default(this);
    apps = new AppManager_1.default(this);
    appTeam = new AppTeamManager_1.default(this);
    teamApps = new TeamAppManager_1.default(this);
    user = new User_1.default(this, {});
    constructor(options = {}) {
        super({ captureRejections: true });
        options = (0, util_1.mergeDefaults)(util_2.DefaultDiscloudAppOptions, options);
        this.rest = new rest_1.REST(options.rest)
            .on("error" /* RESTEvents.Error */, this.emit.bind(this, "error" /* RESTEvents.Error */))
            .on("rateLimited" /* RESTEvents.RateLimited */, this.emit.bind(this, "rateLimited" /* RESTEvents.RateLimited */));
        if ("token" in options) {
            this.#setToken(options.token);
            delete options.token;
        }
        this.options = options;
    }
    #setToken(token) {
        if (!process_1.env.DISCLOUD_TOKEN && token)
            process_1.env.DISCLOUD_TOKEN = token;
        this.rest.setToken(token);
        return this;
    }
    get token() {
        return this.rest.token;
    }
    /**
     * Login on Discloud API
     *
     * @param token - Your Discloud token
     */
    login(token = this.token ?? process_1.env.DISCLOUD_TOKEN) {
        if (typeof token !== "string")
            throw new Error("[DISCLOUD API] Missing token.");
        this.#setToken(token);
        return this.user.fetch();
    }
}
exports.default = DiscloudApp;
