import { type ApiAppManagerRemovedAll, type ApiAppManagerRestartedAll, type ApiAppManagerStartedAll, type ApiAppManagerStopedAll, type ApiTerminal, type RESTApiBaseResult, type RESTDeleteApiAppDeleteResult, type RESTPutApiAppCommitResult, type RESTPutApiAppRamResult, type RESTPutApiAppRestartResult, type RESTPutApiAppStartResult, type RESTPutApiAppStopResult } from "@discloudapp/api-types/v2";
import { ProfileOptions, type CreateAppOptions, type UpdateAppOptions } from "../@types";
import type DiscloudApp from "../discloudApp/DiscloudApp";
import App from "../structures/App";
import AppBackup from "../structures/AppBackup";
import AppStatus from "../structures/AppStatus";
import AppUploaded from "../structures/AppUploaded";
import CachedManager from "./CachedManager";
/**
 * Manager for apps on Discloud
 */
export default class AppManager extends CachedManager<typeof App> {
    #private;
    constructor(discloudApp: DiscloudApp);
    /**
     * Get the status of your application on Discloud
     *
     * @param appID - Your app id
     */
    status(appID: string): Promise<AppStatus>;
    status(appID?: "all"): Promise<Map<string, AppStatus>>;
    /**
     * Send a command to your app's terminal
     *
     * @param appID - Your app id
     * @param command - The command
     */
    console(appID: string, command: string): Promise<string>;
    /**
     * Get logs of your application on Discloud
     *
     * @param appID - Your app id
     */
    terminal(appID: string): Promise<ApiTerminal>;
    terminal(appID?: "all"): Promise<Map<string, ApiTerminal>>;
    /**
     * Get backups of your application on Discloud
     *
     * @param appID - Your app id
     */
    backup(appID: string): Promise<AppBackup>;
    backup(appID?: "all"): Promise<Map<string, AppBackup>>;
    /**
     * Set the quantity of ram to your application
     *
     * @param appID - Your app id
     * @param quantity - Minimum values is `100` to `bot` or `512` for `site`
     */
    ram(appID: string, quantity: number): Promise<RESTPutApiAppRamResult>;
    /**
     * Upload a new app or site to Discloud
     *
     * @param options - Options for create a new app. A {@link FileResolvable} is required.
     */
    create(options: CreateAppOptions): Promise<import("@discloudapp/api-types/v2").RESTPostApiUploadErrorResult | (import("@discloudapp/api-types/v2").RESTPostApiUploadOkResult & {
        app: AppUploaded;
    })>;
    /**
     * Update an of your apps on Discloud.
     *
     * @param appID - Your app id
     * @param options - Options to update your app.
     */
    update(appID: string, options: UpdateAppOptions): Promise<RESTPutApiAppCommitResult>;
    /**
     * Delete your application from Discloud.
     *
     * @param appID - Your app id
     */
    delete(appID: string): Promise<RESTDeleteApiAppDeleteResult>;
    delete(appID?: "all"): Promise<ApiAppManagerRemovedAll>;
    /**
     * Update the profile of your apps on Discloud.
     *
     * @param appID - Your app id
     * @param options - Options to update your app.
     */
    profile(appID: string, options: ProfileOptions): Promise<RESTApiBaseResult>;
    /**
     * Restart your application on Discloud
     *
     * @param appID - You app id
     */
    restart(appID: string): Promise<RESTPutApiAppRestartResult>;
    restart(appID?: "all"): Promise<ApiAppManagerRestartedAll>;
    /**
     * Start your application on Discloud
     *
     * @param appID - You app id
     */
    start(appID: string): Promise<RESTPutApiAppStartResult>;
    start(appID?: "all"): Promise<ApiAppManagerStartedAll>;
    /**
     * Stop your application on Discloud
     *
     * @param appID - You app id
     */
    stop(appID: string): Promise<RESTPutApiAppStopResult>;
    stop(appID?: "all"): Promise<ApiAppManagerStopedAll>;
    /**
     * Get information of your application on Discloud.
     *
     * @param appID - You app id.
     */
    fetch(appID: string): Promise<App>;
    fetch(appID?: "all"): Promise<Map<string, App>>;
}
//# sourceMappingURL=AppManager.d.ts.map