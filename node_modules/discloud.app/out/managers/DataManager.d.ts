import type { Constructable } from "../@types";
import type DiscloudApp from "../discloudApp/DiscloudApp";
import BaseManager from "./BaseManager";
/**
 * Manager for data
 */
export default abstract class DataManager<T extends Constructable<T>> extends BaseManager {
    protected readonly _cache: Map<string, InstanceType<T>>;
    protected readonly holds: T;
    constructor(discloudApp: DiscloudApp, holds: T);
    get cache(): Map<string, InstanceType<T>>;
    /**
     * Resolves a data entry to a data Object.
     * @param idOrInstance - The id or instance of something in this Manager
     */
    resolve(idOrInstance: string | InstanceType<T>): InstanceType<T> | null;
    resolveId(idOrInstance: string | InstanceType<T>): any;
    valueOf(): Map<string, InstanceType<T>>;
}
//# sourceMappingURL=DataManager.d.ts.map