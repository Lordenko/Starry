"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const DataManager_1 = tslib_1.__importDefault(require("./DataManager"));
/**
 * Manager of cache
 */
class CachedManager extends DataManager_1.default {
    constructor(discloudApp, holds, iterable) {
        super(discloudApp, holds);
        if (iterable) {
            for (const item of iterable) {
                this._add(item);
            }
        }
    }
    _add(data) {
        const existing = this.cache.get(data.id);
        if (existing) {
            // @ts-expect-error ts(2339)
            existing._patch(data);
            return existing;
        }
        const entry = this.holds ? new this.holds(this.discloudApp, data) : data;
        this.discloudApp.user.appIDs.add(entry.id);
        this.cache.set(entry.id, entry);
        return entry;
    }
    _addMany(data) {
        const cache = new Map();
        for (const element of data) {
            const obj = this._add(element);
            // @ts-expect-error ts(2339)
            cache.set(obj.id, obj);
        }
        return cache;
    }
    _clear(data) {
        if (!data?.length)
            return this._cache.clear();
        const mapped = data.map(v => typeof v === "string" ? v : v.id);
        for (const id of this._cache.keys()) {
            if (!mapped.includes(id)) {
                this._delete(id);
            }
        }
    }
    _delete(id) {
        this.discloudApp.user.appIDs.delete(id);
        return this.cache.delete(id);
    }
    _deleteMany(ids) {
        for (const id of ids)
            this._delete(id);
        return true;
    }
}
exports.default = CachedManager;
